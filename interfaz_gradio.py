# interfaz_gradio.py
# =============================================================================
# INTERFAZ_GRADIO.PY - M√ìDULO DE INTERFAZ DE USUARIO
# =============================================================================
# Este m√≥dulo contiene la l√≥gica para crear y lanzar la interfaz de usuario con Gradio

import gradio as gr
from calculos_fisica import simular_colision, generar_animaciones

def crear_interface():
    """
    Crea y configura la interfaz de usuario con Gradio
    
    Returns:
        gr.Blocks: Interfaz de Gradio configurada
    """
    with gr.Blocks(
        theme=gr.themes.Soft(), 
        title="Simulador de Colisi√≥n Vehicular",
        css="""
        .gradio-container {
            max-width: 1400px;
            margin: auto;
        }
        """
    ) as demo:
        
        gr.Markdown("""
        # üöó Simulador de Impacto Vehicular - An√°lisis F√≠sico Completo
        
        Esta herramienta educativa demuestra **c√≥mo** y **por qu√©** el cintur√≥n de seguridad 
        salva vidas mediante principios fundamentales de la f√≠sica.
        
        **üìö Conceptos aplicados:** F = m √ó a, Impulso, Cinem√°tica, Fuerzas G
        
        **üÜï Nuevo:** Modo realista que calcula los tiempos seg√∫n f√≠sica real
        """)

        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### ‚öôÔ∏è Par√°metros de Simulaci√≥n")
                
                masa_input = gr.Slider(
                    minimum=20, maximum=150, value=70, step=1,
                    label="üë§ Masa del Cuerpo (kg)",
                    info="Peso t√≠pico de una persona adulta"
                )
                
                velocidad_input = gr.Slider(
                    minimum=10, maximum=200, value=50, step=5,
                    label="üèéÔ∏è Velocidad Inicial (km/h)",
                    info="Velocidad del veh√≠culo antes del impacto"
                )
                
                modo_tiempo = gr.Radio(
                    choices=["C√°lculo Realista", "Configuraci√≥n Manual"],
                    value="C√°lculo Realista",
                    label="üî¨ Modo de C√°lculo de Tiempos",
                    info="Realista: basado en f√≠sica real. Manual: t√∫ decides los tiempos"
                )
                
                with gr.Group(visible=False) as controles_manuales:
                    tiempo_con_cinturon_input = gr.Slider(
                        minimum=0.2, maximum=2.0, value=0.5, step=0.1,
                        label="‚è±Ô∏è Tiempo de Frenado CON Cintur√≥n (s)",
                        info="El cintur√≥n extiende el tiempo de desaceleraci√≥n"
                    )
                    
                    tiempo_sin_cinturon_input = gr.Slider(
                        minimum=0.01, maximum=0.5, value=0.1, step=0.01,
                        label="‚è±Ô∏è Tiempo de Frenado SIN Cintur√≥n (s)",
                        info="Impacto directo, tiempo muy corto"
                    )
                
                btn_simular = gr.Button("üöÄ Ejecutar Simulaci√≥n", variant="primary", size="lg")
                btn_animaciones = gr.Button("üé• Generar Animaciones", variant="secondary", size="lg", visible=False)
                
                gr.Markdown("""
                ### üí° Modos de Uso:
                
                **üî¨ Modo Realista:**
                - Calcula tiempos basados en f√≠sica real
                - Demuestra c√≥mo el cintur√≥n **causa** el aumento de tiempo
                - M√°s educativo para entender el principio f√≠sico
                
                **‚öôÔ∏è Modo Manual:**
                - T√∫ defines los tiempos manualmente
                - √ötil para explorar "¬øqu√© pasar√≠a si...?"
                - Permite ver el efecto puro de cambiar el tiempo
                """)

            with gr.Column(scale=2):
                gr.Markdown("### üìä Resultados de la Simulaci√≥n")
                plot_output = gr.Plot(label="An√°lisis F√≠sico Completo")
                analisis_output = gr.Markdown(label="An√°lisis Detallado")
                datos_simulacion_state = gr.State()
                with gr.Row():
                    anim_sin_output = gr.Video(label="Animaci√≥n: Sin Cintur√≥n")
                    anim_con_output = gr.Video(label="Animaci√≥n: Con Cintur√≥n")

        # Funci√≥n para mostrar/ocultar controles manuales
        def actualizar_controles(modo):
            return gr.update(visible=(modo == "Configuraci√≥n Manual"))

        # Funci√≥n para ejecutar la simulaci√≥n
        def ejecutar_simulacion(masa, velocidad, modo, tiempo_con_manual, tiempo_sin_manual):
            if any(x is None for x in [masa, velocidad, modo]):
                return None, "‚ùå Error: Todos los par√°metros deben tener valores v√°lidos", None, gr.update(visible=True)
            if modo == "Configuraci√≥n Manual" and any(x is None for x in [tiempo_con_manual, tiempo_sin_manual]):
                return None, "‚ùå Error: Los tiempos manuales deben tener valores v√°lidos", None, gr.update(visible=True)
            usar_manual = (modo == "Configuraci√≥n Manual")
            fig, analisis, datos = simular_colision(masa, velocidad, usar_manual, tiempo_con_manual, tiempo_sin_manual)
            return fig, analisis, datos, gr.update(visible=True)

        # Funci√≥n para generar animaciones
        def ejecutar_animaciones(datos_simulacion):
            if datos_simulacion is None:
                return None, "‚ùå Error: No hay datos de simulaci√≥n disponibles", None
            anim_sin, anim_con = generar_animaciones(datos_simulacion)
            return anim_sin, anim_con

        modo_tiempo.change(
            fn=actualizar_controles,
            inputs=[modo_tiempo],
            outputs=[controles_manuales]
        )

        btn_simular.click(
            fn=ejecutar_simulacion,
            inputs=[masa_input, velocidad_input, modo_tiempo, tiempo_con_cinturon_input, tiempo_sin_cinturon_input],
            outputs=[plot_output, analisis_output, datos_simulacion_state, btn_animaciones]
        )

        btn_animaciones.click(
            fn=ejecutar_animaciones,
            inputs=[datos_simulacion_state],
            outputs=[anim_sin_output, anim_con_output]
        )

        gr.Markdown("""
        ---
        ### üî¨ Explicaci√≥n Cient√≠fica Fundamental:
        
        **¬øPor qu√© funciona el cintur√≥n de seguridad?**
        
        La respuesta est√° en la ecuaci√≥n fundamental: **F = m √ó a = m √ó (Œîv/Œît)**
        
        **Componentes de la ecuaci√≥n:**
        - **m:** Masa del cuerpo (constante)
        - **Œîv:** Cambio de velocidad (constante - siempre de velocidad inicial a 0)
        - **Œît:** Tiempo de desaceleraci√≥n (VARIABLE CLAVE)
        - **F:** Fuerza resultante (lo que causa lesiones)
        
        **El cintur√≥n salva vidas porque:**
        1. **Aumenta Œît:** Extiende el tiempo de desaceleraci√≥n
        2. **Reduce F:** Al aumentar Œît, autom√°ticamente se reduce F
        3. **Distribuye fuerza:** Sobre √°rea mayor del cuerpo
        4. **Absorbe energ√≠a:** Material extensible absorbe parte del impacto
        
        **üéØ Principio clave:** Misma energ√≠a + m√°s tiempo = menos fuerza destructiva
        
        ---
        
        ### üìà Interpretaci√≥n de los Gr√°ficos:
        
        **Gr√°fico de Fuerza vs Tiempo:**
        - √Årea bajo ambas curvas es igual (mismo impulso)
        - Pico m√°s bajo con cintur√≥n = menos da√±o
        - Duraci√≥n m√°s larga con cintur√≥n = desaceleraci√≥n gradual
        
        **Gr√°fico de Aceleraci√≥n vs Tiempo:**
        - Muestra la tasa de cambio de velocidad
        - Pico m√°s bajo = menos trauma al cuerpo
        - Relaci√≥n directa con fuerzas G experimentadas
        
        **Comparaci√≥n de Barras:**
        - Visualizaci√≥n directa de la reducci√≥n de fuerzas
        - Fuerzas G: referencia m√©dica para supervivencia
        - Comparaci√≥n cuantitativa de todos los par√°metros
        """)

    return demo